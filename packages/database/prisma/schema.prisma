// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  role            Role?
  onBoardedOnTest Boolean @default(false)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Institute Institute[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Institute {
  id          String  @id @default(cuid())
  name        String
  description String?
  email       String
  city        String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id        String    @id @default(cuid())
  className String
  Chapter   Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id                        String    @id @default(cuid())
  subjectName               String
  questionCount             Int       @default(0)
  position                  Int
  isImportanceAvailable     Boolean
  isSyllabusFilterAvailable Boolean
  isVisible                 Boolean
  Unit                      Unit[]
  Chapter                   Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id            String    @id @default(cuid())
  unitName      String
  totalChapters Int
  isVisible     Boolean
  subjectId     String
  subject       Subject   @relation(fields: [subjectId], references: [id])
  chapters      Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subjectId])
}

model Chapter {
  id                             String  @id @default(cuid())
  chapterName                    String
  importance                     String
  priority                       Int
  order                          Int
  classId                        String
  class                          Class   @relation(fields: [classId], references: [id])
  syllabusCategory               String
  isTopicSyllabusFilterAvailable Boolean
  questionCount                  Int
  isVisible                      Boolean
  unitId                         String
  unit                           Unit    @relation(fields: [unitId], references: [id])
  subjectId                      String
  subject                        Subject @relation(fields: [subjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Topics    Topics[]
}

model Topics {
  id               String  @id @default(cuid())
  topicName        String
  isVisible        Boolean
  position         Int
  isMustDo         Boolean
  syllabusCategory String
  noOfQuestions    Int
  chapterId        String
  chapter          Chapter @relation(fields: [chapterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  INSTITUTE
}
