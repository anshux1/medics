// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  role            Role?
  onBoardedOnTest Boolean @default(false)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Institute Institute[]
  Tests     StudentTest[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Institute {
  id          String  @id @default(cuid())
  name        String
  description String?
  email       String
  city        String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tests       Test[]
}

model Class {
  id        String    @id @default(cuid())
  className String
  Chapter   Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id        String     @id @default(cuid())
  examName  String
  logo      String
  position  Int
  Years     Years[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]
}

model Years {
  id            String     @id @default(cuid())
  yearName      String
  yearShortName String
  examId        String
  isVisible     Boolean
  exam          Exam       @relation(fields: [examId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Question      Question[]
}

model Subject {
  id                        String    @id @default(cuid())
  subjectName               String
  questionCount             Int       @default(0)
  position                  Int
  isImportanceAvailable     Boolean
  isSyllabusFilterAvailable Boolean
  isVisible                 Boolean
  Unit                      Unit[]
  Chapter                   Chapter[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Question      Question[]
  TestOnSubject TestOnSubject[]
}

model Unit {
  id            String    @id @default(cuid())
  unitName      String
  totalChapters Int
  isVisible     Boolean
  subjectId     String
  subject       Subject   @relation(fields: [subjectId], references: [id])
  chapters      Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subjectId])
}

model Chapter {
  id                             String  @id @default(cuid())
  chapterName                    String
  importance                     String
  priority                       Int
  order                          Int
  classId                        String
  class                          Class   @relation(fields: [classId], references: [id])
  syllabusCategory               String
  isTopicSyllabusFilterAvailable Boolean
  questionCount                  Int
  isVisible                      Boolean
  unitId                         String
  unit                           Unit    @relation(fields: [unitId], references: [id])
  subjectId                      String
  subject                        Subject @relation(fields: [subjectId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Topics        Topics[]
  Question      Question[]
  TestOnChapter TestOnChapter[]
}

model Topics {
  id               String  @id @default(cuid())
  topicName        String
  isVisible        Boolean
  position         Int
  isMustDo         Boolean
  syllabusCategory String
  noOfQuestions    Int
  chapterId        String
  chapter          Chapter @relation(fields: [chapterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id                       String           @id @default(cuid())
  level                    Int
  questionStatement        String
  questionImage            String?
  approximatedTimeRequired Int
  isRemoved                Boolean
  solution                 String
  solutionImage            String?
  previousYearPaperId      String
  chapterId                String
  subjectId                String
  Chapter                  Chapter          @relation(fields: [chapterId], references: [id])
  Years                    Years            @relation(fields: [previousYearPaperId], references: [id])
  subject                  Subject          @relation(fields: [subjectId], references: [id])
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  Exam                     Exam             @relation(fields: [examId], references: [id])
  examId                   String
  Options                  Options[]
  TestOnQuestion           TestOnQuestion[]
}

model Options {
  id         String   @id @default(cuid())
  text       String
  image      String?
  isCorrect  Boolean
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model Test {
  id             String           @id @default(cuid())
  name           String
  instituteId    String
  institute      Institute        @relation(fields: [instituteId], references: [id])
  difficulty     Int
  noOfQuestions  Int
  timeLimit      Int
  TestOnSubject  TestOnSubject[]
  TestOnChapter  TestOnChapter[]
  TestOnQuestion TestOnQuestion[]
  Students       StudentTest[]

  expires_at DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StudentTest {
  id        String @id @default(cuid())
  testId    String
  studentId String
  Test      Test   @relation(fields: [testId], references: [id])
  Student   User   @relation(fields: [studentId], references: [id])
}

model TestOnSubject {
  testId    String
  subjectId String
  Test      Test    @relation(fields: [testId], references: [id])
  Subject   Subject @relation(fields: [subjectId], references: [id])

  @@id([testId, subjectId])
}

model TestOnChapter {
  testId    String
  chapterId String
  Test      Test    @relation(fields: [testId], references: [id])
  Chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@id([testId, chapterId])
}

model TestOnQuestion {
  testId     String
  questionId String
  Test       Test     @relation(fields: [testId], references: [id])
  Question   Question @relation(fields: [questionId], references: [id])

  @@id([testId, questionId])
}

enum Role {
  STUDENT
  INSTITUTE
}
